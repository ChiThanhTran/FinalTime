// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DB;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Server.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryBio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryBio = "The Thao trong nuoc va quoc te",
                            CategoryName = "The Thao"
                        },
                        new
                        {
                            Id = 2,
                            CategoryBio = "Tri thuc, phat minh, xu huong, ly thuyet trong tat ca linh vuc khoa hoc co ban",
                            CategoryName = "Khoa hoc Cong nghe"
                        },
                        new
                        {
                            Id = 3,
                            CategoryBio = "phan tich game cho cac game thu",
                            CategoryName = "Game"
                        });
                });

            modelBuilder.Entity("Server.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            Text = "Bai viet hay",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2023, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            Text = "Bai viet k hay",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2023, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            Text = "Bai viet rat hay",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.LikeComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("IsLikeComment")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeComment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a127437-a6ac-46ec-aa37-aa2b8dbecb74"),
                            CommentId = 1,
                            IsLikeComment = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("0deea64c-7376-4bd2-a095-8d733443ff27"),
                            CommentId = 2,
                            IsLikeComment = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("d3cb588d-3221-4ff7-b56d-3ef28fbf6655"),
                            CommentId = 3,
                            IsLikeComment = 0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.LikePost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsLikePost")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("LikePost");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6958596d-14fb-49b5-90b8-edc17a487ffa"),
                            IsLikePost = 0,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("43857b37-660a-4069-b2cb-5306b603b3f9"),
                            IsLikePost = 0,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("a306a3dc-0b42-4578-bc22-a778125f2707"),
                            IsLikePost = 0,
                            PostId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.LikeReplyComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsLikeReplyComment")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeReplyComment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e41f43a-2c80-4323-a4ad-c856dbeb460c"),
                            IsLikeReplyComment = 0,
                            ReplyCommentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("72608c83-2ca7-4bc3-9c43-b3ea309941e3"),
                            IsLikeReplyComment = 0,
                            ReplyCommentId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("4652507d-d176-4f31-a089-dec904773ef1"),
                            IsLikeReplyComment = 0,
                            ReplyCommentId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TitleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "cung tim hieu cau tra loi trong bai viet nay",
                            PostDay = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostTitle = "Messi co phai vi dai nhat lich su",
                            Specification = "chac chan la nhu the...",
                            Status = 0,
                            TitleImage = "1",
                            UserId = 1,
                            View = "1000"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "lieu nhung gi trong phim anh co tro thanh su thuc",
                            PostDay = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostTitle = "Ky nguyen tri tue nhan tao lieu da toi",
                            Specification = "co le...",
                            Status = 0,
                            TitleImage = "2",
                            UserId = 2,
                            View = "2000"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "voi hang ta cap nhat, lieu co le",
                            PostDay = new DateTime(2023, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostTitle = "CS2 co lam Valorant bien mat?",
                            Specification = "CS2 se phat hanh...",
                            Status = 0,
                            TitleImage = "3",
                            UserId = 3,
                            View = "3000"
                        });
                });

            modelBuilder.Entity("Server.Entities.ReplyComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyComment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentId = 1,
                            CreateAt = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "toi dong y",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommentId = 2,
                            CreateAt = new DateTime(2023, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "dung vay",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CommentId = 3,
                            CreateAt = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "chuan",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.Safe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsSafe")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Safe");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18bf7cbf-8591-4526-9871-0eb025862a3f"),
                            IsSafe = 0,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("28e7928e-9b09-4b91-8305-23ee2af84872"),
                            IsSafe = 0,
                            PostId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("4bbc5590-d9dc-486b-80a4-2799c16c8608"),
                            IsSafe = 0,
                            PostId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagName = "Bong Da"
                        },
                        new
                        {
                            Id = 2,
                            TagName = "Tri tue nhan tao"
                        },
                        new
                        {
                            Id = 3,
                            TagName = "CSGO"
                        });
                });

            modelBuilder.Entity("Server.Entities.TagInPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("TagInPost");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0694b78-9776-45f9-85dc-826d1d1b7a8e"),
                            PostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = new Guid("86753597-b4d5-4074-8c7e-299263eab7a0"),
                            PostId = 2,
                            TagId = 2
                        },
                        new
                        {
                            Id = new Guid("845c579e-c67a-40e9-a40a-2b042e4cde2a"),
                            PostId = 3,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("Server.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Follower")
                        .HasColumnType("int");

                    b.Property<int>("Following")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundImage = "3",
                            Bio = "ToTheStar",
                            DateOfBirth = new DateTime(1999, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranchithanh1809@gmail.com",
                            Follower = 1,
                            Following = 10,
                            Gender = 0,
                            Image = "3",
                            Location = "Ha Noi",
                            Name = "Thanh",
                            Password = "thanh321",
                            Phone = "0376959875",
                            Type = 0,
                            Username = "thanh123"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundImage = "4",
                            Bio = "Kutelata",
                            DateOfBirth = new DateTime(1999, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "longkute123@gmail.com",
                            Follower = 3,
                            Following = 10,
                            Gender = 0,
                            Image = "4",
                            Location = "Ha Noi",
                            Name = "Long",
                            Password = "long321",
                            Phone = "0832536799",
                            Type = 0,
                            Username = "long123"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundImage = "9",
                            Bio = "DatKhongChin",
                            DateOfBirth = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nmdat0909@gmail.com",
                            Follower = 9,
                            Following = 9,
                            Gender = 0,
                            Image = "9",
                            Location = "Ha Noi",
                            Name = "Dat",
                            Password = "dat321",
                            Phone = "0345613499",
                            Type = 0,
                            Username = "dat123"
                        });
                });

            modelBuilder.Entity("Server.Entities.Comment", b =>
                {
                    b.HasOne("Server.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.LikeComment", b =>
                {
                    b.HasOne("Server.Entities.Comment", "Comment")
                        .WithMany("LikeComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("LikeComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.LikePost", b =>
                {
                    b.HasOne("Server.Entities.Post", "Post")
                        .WithMany("LikePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("LikePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.LikeReplyComment", b =>
                {
                    b.HasOne("Server.Entities.ReplyComment", "ReplyComment")
                        .WithMany("LikeReplyComments")
                        .HasForeignKey("ReplyCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("LikeReplyComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReplyComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.Post", b =>
                {
                    b.HasOne("Server.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.ReplyComment", b =>
                {
                    b.HasOne("Server.Entities.Comment", "Comment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("ReplyComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.Safe", b =>
                {
                    b.HasOne("Server.Entities.Post", "Post")
                        .WithMany("Safes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.User", "User")
                        .WithMany("Safes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Entities.TagInPost", b =>
                {
                    b.HasOne("Server.Entities.Post", "Post")
                        .WithMany("TagInPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Entities.Tag", "Tag")
                        .WithMany("TagInPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Server.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Server.Entities.Comment", b =>
                {
                    b.Navigation("LikeComments");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("Server.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikePosts");

                    b.Navigation("Safes");

                    b.Navigation("TagInPosts");
                });

            modelBuilder.Entity("Server.Entities.ReplyComment", b =>
                {
                    b.Navigation("LikeReplyComments");
                });

            modelBuilder.Entity("Server.Entities.Tag", b =>
                {
                    b.Navigation("TagInPosts");
                });

            modelBuilder.Entity("Server.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikeComments");

                    b.Navigation("LikePosts");

                    b.Navigation("LikeReplyComments");

                    b.Navigation("Posts");

                    b.Navigation("ReplyComments");

                    b.Navigation("Safes");
                });
#pragma warning restore 612, 618
        }
    }
}
